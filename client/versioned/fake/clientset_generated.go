// Copyright Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
	clientset "maistra.io/api/client/versioned"
	controlplanev1 "maistra.io/api/client/versioned/typed/controlplane/v1"
	fakecontrolplanev1 "maistra.io/api/client/versioned/typed/controlplane/v1/fake"
	controlplanev2 "maistra.io/api/client/versioned/typed/controlplane/v2"
	fakecontrolplanev2 "maistra.io/api/client/versioned/typed/controlplane/v2/fake"
	extensionv1 "maistra.io/api/client/versioned/typed/extension/v1"
	fakeextensionv1 "maistra.io/api/client/versioned/typed/extension/v1/fake"
	extensionv1alpha1 "maistra.io/api/client/versioned/typed/extension/v1alpha1"
	fakeextensionv1alpha1 "maistra.io/api/client/versioned/typed/extension/v1alpha1/fake"
	federationv1alpha1 "maistra.io/api/client/versioned/typed/federation/v1alpha1"
	fakefederationv1alpha1 "maistra.io/api/client/versioned/typed/federation/v1alpha1/fake"
	memberv1 "maistra.io/api/client/versioned/typed/member/v1"
	fakememberv1 "maistra.io/api/client/versioned/typed/member/v1/fake"
	memberrollv1 "maistra.io/api/client/versioned/typed/memberroll/v1"
	fakememberrollv1 "maistra.io/api/client/versioned/typed/memberroll/v1/fake"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var _ clientset.Interface = &Clientset{}

// ControlplaneV1 retrieves the ControlplaneV1Client
func (c *Clientset) ControlplaneV1() controlplanev1.ControlplaneV1Interface {
	return &fakecontrolplanev1.FakeControlplaneV1{Fake: &c.Fake}
}

// ControlplaneV2 retrieves the ControlplaneV2Client
func (c *Clientset) ControlplaneV2() controlplanev2.ControlplaneV2Interface {
	return &fakecontrolplanev2.FakeControlplaneV2{Fake: &c.Fake}
}

// ExtensionV1 retrieves the ExtensionV1Client
func (c *Clientset) ExtensionV1() extensionv1.ExtensionV1Interface {
	return &fakeextensionv1.FakeExtensionV1{Fake: &c.Fake}
}

// ExtensionV1alpha1 retrieves the ExtensionV1alpha1Client
func (c *Clientset) ExtensionV1alpha1() extensionv1alpha1.ExtensionV1alpha1Interface {
	return &fakeextensionv1alpha1.FakeExtensionV1alpha1{Fake: &c.Fake}
}

// FederationV1alpha1 retrieves the FederationV1alpha1Client
func (c *Clientset) FederationV1alpha1() federationv1alpha1.FederationV1alpha1Interface {
	return &fakefederationv1alpha1.FakeFederationV1alpha1{Fake: &c.Fake}
}

// MemberV1 retrieves the MemberV1Client
func (c *Clientset) MemberV1() memberv1.MemberV1Interface {
	return &fakememberv1.FakeMemberV1{Fake: &c.Fake}
}

// MemberrollV1 retrieves the MemberrollV1Client
func (c *Clientset) MemberrollV1() memberrollv1.MemberrollV1Interface {
	return &fakememberrollv1.FakeMemberrollV1{Fake: &c.Fake}
}
