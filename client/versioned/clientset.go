// Copyright Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
	controlplanev1 "maistra.io/api/client/versioned/typed/controlplane/v1"
	controlplanev2 "maistra.io/api/client/versioned/typed/controlplane/v2"
	extensionv1 "maistra.io/api/client/versioned/typed/extension/v1"
	extensionv1alpha1 "maistra.io/api/client/versioned/typed/extension/v1alpha1"
	federationv1alpha1 "maistra.io/api/client/versioned/typed/federation/v1alpha1"
	memberv1 "maistra.io/api/client/versioned/typed/member/v1"
	memberrollv1 "maistra.io/api/client/versioned/typed/memberroll/v1"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	ControlplaneV1() controlplanev1.ControlplaneV1Interface
	ControlplaneV2() controlplanev2.ControlplaneV2Interface
	ExtensionV1() extensionv1.ExtensionV1Interface
	ExtensionV1alpha1() extensionv1alpha1.ExtensionV1alpha1Interface
	FederationV1alpha1() federationv1alpha1.FederationV1alpha1Interface
	MemberV1() memberv1.MemberV1Interface
	MemberrollV1() memberrollv1.MemberrollV1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	controlplaneV1     *controlplanev1.ControlplaneV1Client
	controlplaneV2     *controlplanev2.ControlplaneV2Client
	extensionV1        *extensionv1.ExtensionV1Client
	extensionV1alpha1  *extensionv1alpha1.ExtensionV1alpha1Client
	federationV1alpha1 *federationv1alpha1.FederationV1alpha1Client
	memberV1           *memberv1.MemberV1Client
	memberrollV1       *memberrollv1.MemberrollV1Client
}

// ControlplaneV1 retrieves the ControlplaneV1Client
func (c *Clientset) ControlplaneV1() controlplanev1.ControlplaneV1Interface {
	return c.controlplaneV1
}

// ControlplaneV2 retrieves the ControlplaneV2Client
func (c *Clientset) ControlplaneV2() controlplanev2.ControlplaneV2Interface {
	return c.controlplaneV2
}

// ExtensionV1 retrieves the ExtensionV1Client
func (c *Clientset) ExtensionV1() extensionv1.ExtensionV1Interface {
	return c.extensionV1
}

// ExtensionV1alpha1 retrieves the ExtensionV1alpha1Client
func (c *Clientset) ExtensionV1alpha1() extensionv1alpha1.ExtensionV1alpha1Interface {
	return c.extensionV1alpha1
}

// FederationV1alpha1 retrieves the FederationV1alpha1Client
func (c *Clientset) FederationV1alpha1() federationv1alpha1.FederationV1alpha1Interface {
	return c.federationV1alpha1
}

// MemberV1 retrieves the MemberV1Client
func (c *Clientset) MemberV1() memberv1.MemberV1Interface {
	return c.memberV1
}

// MemberrollV1 retrieves the MemberrollV1Client
func (c *Clientset) MemberrollV1() memberrollv1.MemberrollV1Interface {
	return c.memberrollV1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.controlplaneV1, err = controlplanev1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.controlplaneV2, err = controlplanev2.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.extensionV1, err = extensionv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.extensionV1alpha1, err = extensionv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.federationV1alpha1, err = federationv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.memberV1, err = memberv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.memberrollV1, err = memberrollv1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.controlplaneV1 = controlplanev1.NewForConfigOrDie(c)
	cs.controlplaneV2 = controlplanev2.NewForConfigOrDie(c)
	cs.extensionV1 = extensionv1.NewForConfigOrDie(c)
	cs.extensionV1alpha1 = extensionv1alpha1.NewForConfigOrDie(c)
	cs.federationV1alpha1 = federationv1alpha1.NewForConfigOrDie(c)
	cs.memberV1 = memberv1.NewForConfigOrDie(c)
	cs.memberrollV1 = memberrollv1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.controlplaneV1 = controlplanev1.New(c)
	cs.controlplaneV2 = controlplanev2.New(c)
	cs.extensionV1 = extensionv1.New(c)
	cs.extensionV1alpha1 = extensionv1alpha1.New(c)
	cs.federationV1alpha1 = federationv1alpha1.New(c)
	cs.memberV1 = memberv1.New(c)
	cs.memberrollV1 = memberrollv1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
